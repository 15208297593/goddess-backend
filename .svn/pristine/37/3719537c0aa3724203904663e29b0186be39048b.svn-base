package com.goddess.ec.manage.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.alibaba.druid.support.json.JSONUtils;
import com.alibaba.fastjson.JSONObject;
import com.goddess.ec.manage.annotation.Controller;
import com.goddess.ec.manage.common.SplitPage;
import com.goddess.ec.manage.constants.AppConstants;
import com.goddess.ec.manage.model.MaterialType;
import com.goddess.ec.manage.model.PropertyType;
import com.goddess.ec.manage.model.Prototype;
import com.goddess.ec.manage.model.PrototypeAccessory;
import com.goddess.ec.manage.service.BrandService;
import com.goddess.ec.manage.service.CustomizeService;
import com.goddess.ec.manage.service.PrototypeService;
import com.goddess.ec.manage.tools.ToolSqlXml;
import com.goddess.ec.manage.tools.ToolUtils;
import com.goddess.ec.manage.tools.ToolWeb;
import com.jfinal.aop.Before;
import com.jfinal.kit.JsonKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
import com.jfinal.upload.UploadFile;

/**
 * 原型管理
 */
@Controller(controllerKey = "/admin/prototype")
public class PrototypeController extends BaseController {

    @SuppressWarnings("unused")
    private static Logger log = Logger.getLogger(PrototypeController.class);

//	// 该基础款所有属性类别。redis type:sorted set.take rank as score
//	private static String template_propertyTypes = "prototype:%s:pt";
//	// 属性类别的各个属性。redis type:hashs.
//	private static String template_propertyType = "prototype:%s:materialType:%s:attrs";
//	// 某属性类别下的某个属性可选的其他属性类别的属性列表。redis type:set
//	private static String template_propertyFitTypeAndProperties = "prototype:%s:tm:%s@%s:fitType:%s:mids";
//	private static String template_propertyFitTypeInitMid = "prototype:%s:tm:%s@%s:fitType:%s:InitMid";

    public void index() {
    	render("/prototype/prototypeList.html");
    }
    
    public void getPrototype() {

    	int prototypeId = getParaToInt(0);
    	Prototype p = Prototype.dao.findById(prototypeId);
    	List<Record> prototypeAccessory = PrototypeService.service.getPrototypeAccessory(prototypeId);
    	List<Record> carousel = new ArrayList<Record>();
    	List<Record> slots = new ArrayList<Record>();
    	List<Record> logos = new ArrayList<Record>();
    	for (Record r : prototypeAccessory) {
    		String type = r.getStr("accessory_type");
    		if (AppConstants.ACCESSORY_CAROUSEL.equals(type)) {
    			carousel.add(r);
    		} else if (AppConstants.ACCESSORY_SLOT.equals(type)) {
    			slots.add(r);
    		} else if (AppConstants.ACCESSORY_LOGO.equals(type)) {
    			logos.add(r);
    		}
    	}
    	setAttr("accessory_type_carousel", AppConstants.ACCESSORY_CAROUSEL);
    	setAttr("accessory_type_slot", AppConstants.ACCESSORY_SLOT);
    	setAttr("accessory_type_logo", AppConstants.ACCESSORY_LOGO);
    	setAttr("slots", slots);
    	setAttr("logos", logos);
    	setAttr("pic_carousel", carousel);
    	setAttr("p", p);
    	// 品牌
    	setAttr("brands", BrandService.service.getAll());

    	// 所有类别
    	classificationTree();
    	// 已选基础款类别
    	List<Record> prototypeClassification = Db.find(ToolSqlXml.getSql("manage.prototype.getPrototypeClassification"), prototypeId);
    	Set<Integer> selectedClassification = new HashSet<Integer>();
    	for (Record r : prototypeClassification) {
    		selectedClassification.add(r.getInt("classification_id"));
    	}
    	setAttr("category", prototypeClassification.size() == 0 ? AppConstants.CATEGORY_BAG : prototypeClassification.get(0).getStr("category"));
    	setAttr("selectedClassification", selectedClassification);
    	
//    	Map<Integer, Map<Integer, Record>> typeAndMaterial = CustomizeService.service.getMaterialCombination();
//    	setAttr("types", PrototypeService.service.getMaterialTypes());
//    	setAttr("typeAndMaterial", JsonKit.toJson(typeAndMaterial));

    	render("/prototype/prototypeDetail.html");
    }

    private void classificationTree() {
    	
    	List<Record> nodes = Db.find(ToolSqlXml.getSql("manage.classification.getAllClassification"));
    	Map<Integer, Record> classificationTree = new HashMap<Integer, Record>();
//    	List<Record> classificationRoots = getTree(nodes, classificationTree);

    	Map<String, Record> categories = new HashMap<String, Record>();
    	for (Record r : nodes) {
    		Integer parentId = r.getInt("parent_id");

    		classificationTree.put(r.getInt("id"), r);
    		if (parentId != 0) {

    			Record node = classificationTree.get(parentId);
    			List<Record> children = node.get("children");
    			if (children == null) {
    				children = new ArrayList<Record>();
    				node.set("children", children);
    			}
    			children.add(r);
    		// 1级结点，父结点为0
    		} else {
    			Record category =categories.get(r.getStr("category"));
    			if (category == null) {
        			List<Record> children = new ArrayList<Record>();
    				category = new Record().set("children", children);
    				categories.put(r.getStr("category"), category);
    			}
    			List<Record> children = category.get("children");
    			children.add(r);
    		}
    	}
    	setAttr("classificationTreeJson", JsonKit.toJson(classificationTree));
    	setAttr("categories", JsonKit.toJson(categories));
    }
    
    public void initPrototype() {

    	Set<Integer> slots = new HashSet<Integer>();
    	Set<Integer> logos = new HashSet<Integer>();
    	setAttr("slots", slots);
    	setAttr("logos", logos);
    	setAttr("typeAndMaterial", JsonKit.toJson(CustomizeService.service.getMaterialCombination()));
    	setAttr("types", PrototypeService.service.getMaterialTypes());
    	setAttr("p", new Prototype());
    	render("/prototype/prototypeDetail.html");
    	// 品牌
    	setAttr("brands", BrandService.service.getAll());
    }
    
    /**
     * 原型类别列表
     */
    public void listPrototypes() {
        SplitPage sp = new SplitPage();
        // 检索条件设定
        sp.setPageNumber(getParaToInt("page"));
        sp.setPageSize(getParaToInt("rows"));
        sp.setOrderColunm(getPara("sort"));
        sp.setOrderMode(getPara("order"));
        
        Map<String, String> params = new HashMap<String, String>();
        sp.setQueryParam(params);

        PrototypeService.service.getPrototypes(sp);

        Map<String, Object> jsonRes = new HashMap<String, Object>();
		jsonRes.put("total",  sp.getPage().getTotalRow());
		jsonRes.put("rows",  sp.getPage().getList());
        renderJson(jsonRes);
    }
    
    /**
     * 添加新原型
     */
    @Before(Tx.class)
    public void savePrototype() {
    	
    	List<UploadFile> upFiles = getFiles();
    	Prototype p = createPrototype();
    	// 保存新类别
    	if (!p.save()) {
    		setAttr("errorMsg", "原型添加失败！");
    	} else {
    		try {
    			// 保存原型的属性类型
//    			savePropertyTypes();
    			
    			if (upFiles != null && upFiles.size() != 0) {
    				p = new Prototype().set("prototype_id", p.getInt("prototype_id"));
    				uploadFile(p, upFiles);
    				Prototype.dao.findById(p.getInt("prototype_id")).setAttrs(p).update();
    			}
    			
    			updatePrototypeAcc();
    			updatePrototypeClassification(p.getInt("prototype_id"), p.getInt("brand_id"), getPara("category"));
    		} catch (IOException e) {
    			e.printStackTrace();
    			setAttr("errorMsg", "上传文件存储失败!");
    		}
    		setAttr("prototype",p);
    	}
    	renderJson(new String[]{"errorMsg", "prototype"});
    }
    
    /**
     * 更新配饰
     */
    private void updatePrototypeAcc() {

		Map<String, String> params = ToolWeb.getParamMap(getRequest());
		for(String key : params.keySet()) {
			// 删除配饰
			if (key.startsWith("delete_accessory_pic_") && AppConstants.DELETE_FLAG_INVALID.equals(params.get(key))) {
				PrototypeAccessory.dao.deleteById(key.replace("delete_accessory_pic_", ""));
			// 更新配饰价格
			} else if (key.startsWith("accessory_price_")) {
				Db.update("prototype_accessory", "accessory_id", new Record().set("accessory_id", Integer.valueOf(key.replace("accessory_price_", ""))).set(
											"accessory_price", StringUtils.isEmpty(params.get(key)) ? 0 : Integer.valueOf(params.get(key))));
			}
		}
    }
    
    /**
     * 更新类别
     * @param prototypeId
     * @param brandId
     * @param category
     */
    private void updatePrototypeClassification(Integer prototypeId, Integer brandId, String category) {
		
    	// 更新商品分类
    	if (StringUtils.isNotEmpty(getPara("classification"))) {
    		String[] classifications = getPara("classification").split("_");
    		// 删除原有的类别id
    		Db.update(ToolSqlXml.getSql("manage.prototype.deleteClassificationByPrototype"), prototypeId);
    		// 添加新的类别id
    		for (String cid : classifications) {
    			Db.update(ToolSqlXml.getSql("manage.prototype.addPrototypeClassification"), prototypeId, Integer.valueOf(cid), brandId, category);
    		}
    	} else {
    		Db.update(ToolSqlXml.getSql("manage.prototype.updateClassificationBrand"), brandId, prototypeId);
    	}
    }

    private void uploadFile(Prototype p, List<UploadFile> upFiles) throws IOException {

		int prototypeId = p.getInt("prototype_id");
		for (UploadFile f : upFiles) {
			String picType = f.getParameterName();
			if (picType.startsWith("accessory_pic_")) {
				String saveURL = ToolUtils.saveUploadFile(f, AppConstants.RELATIVE_PATH_PROTOTYPE + prototypeId, 
						picType.substring(0, picType.lastIndexOf("_")), ToolUtils.getExtension(f.getOriginalFileName()));
				String mark = picType.substring(picType.lastIndexOf("_")+1);
				new PrototypeAccessory().set("prototype_id", p.getInt("prototype_id")).set(
									"accessory_type", getPara("accessory_type_"+mark)).set(
									"accessory_price", getParaToInt("accessory_price_"+mark, 0)).set(
									"accessory_pic", saveURL).save();
			} else {
				String saveURL = ToolUtils.saveUploadFile(f, AppConstants.RELATIVE_PATH_PROTOTYPE + prototypeId, 
						f.getParameterName(), ToolUtils.getExtension(f.getOriginalFileName()));
				p.set(picType.replace("_file", ""), saveURL);
			}
		}
    }
    
    private Prototype createPrototype() {

    	return new Prototype().set(//"prototype_type", getPara("prototype_type")).set(
				"prototype_name", getPara("prototype_name")).set(
				"base_properties", getPara("base_properties")).set(
				"prototype_des", getPara("prototype_des")).set(
				"print_frame", getPara("print_frame")).set(
				"base_price", getParaToInt("base_price")).set(
				"print_price", getParaToInt("print_price")).set(
				"brand_id", getParaToInt("brand_id")).set(
				"delete_flag", AppConstants.DELETE_FLAG_VALID);
    }
    
    /**
     * 验证是否可更新原型，用户定制中是否有尚未付款的记录{prototype_id}
     */
    public void checkUpdatePrototype() {
    	checkUpdate("checkPrototypeIsUsed", getPara(0), "该基础款");
    }
    
    /**
     * 验证是否可更新属性类别，用户定制中是否有尚未付款的记录{property_type_id}
     */
    public void checkUpdateType() {
    	checkUpdate("checkTypeIsUsed", getPara(0), "该属性类别");
    }

    /**
     * 验证是否可删除属性，用户定制中是否有尚未付款的记录{property_type_id}
     */
    public void checkUpdateProperties() {
    	String deletedProperties = StringUtils.join(getPara(0).split("_"), ",");
    	checkUpdate("checkPropertyIsUsed", deletedProperties, "该类别下的某些属性【"+StringUtils.join(getPara(1).split("_"), ",")+"】");
    }
    
    private void checkUpdate(String sqlId, String ids, String msg) {
    	List<Record> res = Db.find(ToolSqlXml.getSql("manage.prototype."+sqlId), 
    			AppConstants.CUSTOMIZE_STATUS_FINISHED, ids, AppConstants.IS_SHELVED_ON, ids);
    	if (res.size() == 2) {
    		String errorMsg = "%s正在被用户【%s】用于未完成的定制中，并且正在被可定制上架商品【%s】使用中";
    		String cellNum = res.get(0).getStr("cell_num");
    		Integer commodityId = res.get(0).getInt("commodity_id");
    		if (cellNum == null)
    			cellNum = res.get(1).getStr("cell_num");
    		else if (commodityId == null)
    			commodityId = res.get(1).getInt("commodity_id");
    		setAttr("errorMsg", String.format(errorMsg, msg, cellNum, commodityId));
    	} else if (res.size() == 1) {
    		if (StringUtils.isNotEmpty(res.get(0).getStr("cell_num")))
    			setAttr("errorMsg", String.format("%s正在被用户【%s】用于未完成的定制中", msg, res.get(0).getStr("cell_num")));
    		else
    			setAttr("errorMsg", String.format("%s正在被可定制上架商品【%s】使用中", msg, res.get(0).getInt("commodity_id")));
    	}
    	renderJson(new String[]{"errorMsg"});
    }
    
    /**
     * 更新原型
     */
    @Before(Tx.class)
    public void updatePrototype() {

    	List<UploadFile> upFiles = getFiles();
    	Prototype p = createPrototype();
    	int prototypeId = getParaToInt("prototype_id");
    	Integer brandId = getParaToInt("brand_id");
    	String category = getPara("category");
    	p.set("prototype_id", prototypeId);
		try {
			if (upFiles != null && upFiles.size() != 0) {
				uploadFile(p, upFiles);
			}
			updatePrototypeAcc();
			updatePrototypeClassification(prototypeId, brandId, category);
	    	
		} catch (IOException e) {
			e.printStackTrace();
			setAttr("errorMsg", "上传文件存储失败");
		}
		Prototype.dao.findById(prototypeId).setAttrs(p).update();
		setAttr("prototype",p);
    	renderJson(new String[]{"errorMsg", "prototype"});
    }
    
    /**
     * 删除原型
     */
    public void deletePrototype() {
    	if (!Prototype.dao.findById(getPara(0)).set("delete_flag", AppConstants.DELETE_FLAG_INVALID).update())
    		setAttr("errorMsg", "删除失败");
    	renderJson(new String[]{"errorMsg"});
    }
    
    public void getPropertyTypes() {

    	int prototypeId = getParaToInt(0);
//    	List<Record> propertyTypes = PrototypeService.service.getPropertyTypes(prototypeId);
    	setAttr("type_rank", PrototypeService.service.getTypeRank(prototypeId));
    	setAttr("prototype_id", prototypeId);
//    	setAttr("propertyTypes", propertyTypes);
//    	render("/prototype/propertyTypes.html");
    	render("/prototype/newPropertyTypes.html");
    
    }
    
    public void getNewPropertyTypes() {

    	int prototypeId = getParaToInt(0);
        Map<String, Object> jsonRes = new HashMap<String, Object>();
    	List<PropertyType> types = PropertyType.dao.find(ToolSqlXml.getSql("manage.prototype.getPropertyTypesByPid"), prototypeId);
		jsonRes.put("total", types.size());
		jsonRes.put("rows",  types);
        renderJson(jsonRes);
    }
    
//    /**
//     * 保存该基础款可选属性类别
//     */
//    public void savePropertyTypes() {
//    	
//    	/// Jedis implements Closable. Hence, the jedis instance will be auto-closed after the last statement.
//    	String selectedTypes = getPara("selected_types");
//    	if (StringUtils.isNotEmpty(selectedTypes)) {
//    		String[] typeArr = selectedTypes.split(",");
//	    	Transaction t = null;
//	    	try (Jedis jedis = RedisPlugin.getRedisThread()) {
//	    		
//	    		t = jedis.multi();
//	
//	    		for (String type : typeArr) {
//	    			String typeKey = String.format(template_propertyType, getPara("prototype_id"), type);
//	    			String rank = getPara("rank_"+type);
//	    			// 选中类别的属性
//    				t.hset(typeKey, "material_type_id", type);
//    				t.hset(typeKey, "rank", rank.toString());
//    				t.hset(typeKey, "is_required", getPara("is_required_"+type));
//    				t.hset(typeKey, "init_mid", getPara("init_mid_"+type));
//    				t.hset(typeKey, "noOption_alert", getPara("noOption_alert_"+type));
//    				
//    				// 选中类别列表
//    				String typeListKey = String.format(template_propertyTypes, getPara("prototype_id"));
//    				// 删除原有的类别列表
//    				t.del(typeListKey);
//    				t.zadd(typeListKey, rank == null ? 999 : Double.valueOf(rank), type);
//	    		}
//	    		// 持久化
//	    		t.save();
//	    		t.exec();
//	    	} catch (Exception e) {
//	    		if (t != null)
//	    			t.discard();
//			}
//    	}
//    }

    /**
     * 初始化属性类别详情页
     */
    public void getPropertyType() {
    	int propertyTypeId = getParaToInt(0, 0);
    	int prototypeId = getParaToInt(1);
    	int parentTypeId = getParaToInt(2,0);
    	int materialTypeId = getParaToInt(3,0);
    	// 已有属性类别
    	if (propertyTypeId != 0) {
    		Record pt = Db.findFirst(ToolSqlXml.getSql("manage.prototype.getPropertyTypesByPtid"), propertyTypeId);
    		setAttr("property_type", pt);
    		
    	} else {
    		Record pt = new Record();
    		pt.set("prototype_id", prototypeId);
    		setAttr("property_type", pt);
    		setAttr("properties", new ArrayList<Record>());
	    	setAttr("conflict_type", new ArrayList<Record>());
    	}
    	int ptType = 0;
    	if (parentTypeId == 0 && materialTypeId == 0) {
    		ptType = AppConstants.TYPE_PT_PRAENT_WITHOUT_M;
    	} else if (parentTypeId == 0 && materialTypeId != 0) {
    		ptType = AppConstants.TYPE_PT_PRAENT_WITH_M;
    	} else if (parentTypeId != 0 && materialTypeId != 0) {
    		ptType = AppConstants.TYPE_PT_CHILD_WITH_M;
    	}
    	setAttr("pt_type", ptType);
    	// 已添加类别的非子类别，剔除自身
    	setAttr("parent_types", Db.find(ToolSqlXml.getSql("manage.prototype.getParentTypesByPid"), prototypeId, parentTypeId == 0 ? propertyTypeId : 0));
    	// 只有非子类别，才可选择原材料类别
    	setAttr("material_types", Db.find("select * from material_type where delete_flag = 0"));
    	render("/prototype/properties.html");
    }
    
    /**
     * 根据所选原材料类别，取得冲突类别及所有原材料属性
     */
    public void getMaterialsAndType() {

    	int materialTypeId = getParaToInt(0);
    	int propertyTypeId = getParaToInt(1, 0);
    	int prototypeId = getParaToInt(2);
		List<Record> otherTypes = Db.find(ToolSqlXml.getSql("manage.prototype.getPropertyTypesWithoutSelf"), materialTypeId, prototypeId);
		// 冲突类型
		if (propertyTypeId != 0) {
			Record pt = Db.findFirst(ToolSqlXml.getSql("manage.prototype.getPropertyTypesByPtid"), propertyTypeId);
    		setAttr("property_type", pt);
			String conflictType = pt.getStr("conflict_type");
			if (StringUtils.isNotEmpty(conflictType)) {
				Map<String, Object> ct = (Map<String, Object>)JSONUtils.parse(conflictType);
				for (Record r : otherTypes) {
					Object mid = ct.get(r.getInt("material_type_id").toString());
					// 有冲突
					if (mid != null) {
						r.set("is_conflict", "1");
						r.set("replace_material_id", mid);
					}
				}
			}
		}
    	List<Record> properties = PrototypeService.service.getProperties(materialTypeId, propertyTypeId);
    	setAttr("properties", properties);
    	setAttr("property_rank", propertyTypeId == 0 ? "" : PrototypeService.service.getPropertyRank(propertyTypeId));
    	setAttr("conflict_type", otherTypes);
    	setAttr("property_type_id", propertyTypeId);
    	setAttr("exhibition_type", MaterialType.dao.findById(materialTypeId).getStr("exhibition_type"));
    	render("/prototype/materialsAndType.html");
    }
    
    /**
     * 添加原型属性
     */
    @Before(Tx.class)
    public void saveProperties() {

    	Integer materialTypeId = getParaToInt("material_type_id", null);
    	Integer parentTypeId = getParaToInt("parent_type_id", null);
    	PropertyType pt = new PropertyType();
    	createPropertyType(pt, parentTypeId, materialTypeId);
		// 未选择原材料类别时，作为父属性类别
		if (materialTypeId == null) {
			if (parentTypeId != null)
				setAttr("errorMsg", "选择了父类别的子类别必须选择原材料类别！");
			else
				pt.save();
			renderJson(new String[]{"errorMsg"});
			return;
		}
		Map<String, String> params = ToolWeb.getParamMap(getRequest());
		updateConflictType(pt, params);
		// 添加原型属性类别
		if (pt.save()) {
			setAttr("property_type", pt);
			savePropertiesWithRank(params, pt.getInt("property_type_id"));
		} else {
			setAttr("errorMsg", "属性类别添加失败！");
		}
		renderJson(new String[]{"errorMsg"});
    }
    
    private void createPropertyType(PropertyType pt, Integer parentTypeId, Integer materialTypeId) {

    	pt.set("type_name", getPara("type_name"));
    	pt.set("type_name_ext", getPara("type_name_ext"));
    	pt.set("prototype_id", getParaToInt("prototype_id"));
    	pt.set("parent_type_id", parentTypeId);
		pt.set("material_type_id", materialTypeId);
		pt.set("rank", getParaToInt("type_rank", 0));
		pt.set("is_required", getPara("is_required", "0"));
		pt.set("default_material_id", getParaToInt("default_material_id", null));
    }
    
    private void savePropertiesWithRank(Map<String, String> params, int propertyTypeId) {
		String[] ranks = getPara("property_rank").split(",");
		Map<String, Integer> rankMap = new HashMap<String, Integer>();
		for (int i = ranks.length; i > 0; i--) {
			rankMap.put(ranks[i-1], i);
		}
		List<Record> properties = new ArrayList<Record>();
		for (String key : params.keySet()) {
			if (key.startsWith("material_id_")) {
				String materialId = params.get(key);
				properties.add(new Record().set(
						"property_type_id", propertyTypeId).set(
						"material_id", Integer.valueOf(materialId)).set(
						"rank", rankMap.get(materialId) == null ? 0 : rankMap.get(materialId)));
			}
		}
		
		int[] result = PrototypeService.service.savePropertiesWithRank(properties);
		for (int r : result) {
			if (r == 0) {
				setAttr("errorMsg", "部分属性添加失败！");
				break;
			}
		}
    }
    
    private void updateConflictType(PropertyType pt, Map<String, String> params) {

		JSONObject conflictType = new JSONObject();
		for (String key : params.keySet()) {
			if (key.startsWith("conflict_type_")) {
				String mtId = params.get(key);
				conflictType.put(mtId, params.get("replace_material_id_"+mtId));
			}
		}
		// 更新冲突类型
		pt.set("conflict_type", conflictType.size() == 0 ? null : conflictType.toJSONString()).set(
				"conflict_alert", getPara("conflict_alert"));
    }
    
    /**
     * 更新原型属性
     */
    @Before(Tx.class)
    public void updateProperties() {

    	int propertyTypeId = getParaToInt("property_type_id");
    	int prototypeId = getParaToInt("prototype_id");
    	Integer curMaterialTypeId = getParaToInt("cur_material_type_id", 0);
    	Integer materialTypeId = getParaToInt("material_type_id", null);
    	Integer parentTypeId = getParaToInt("parent_type_id", null);
    	// 更新前属性类别的类型
    	int ptType = getParaToInt("pt_type", 0);
    	
    	PropertyType pt = PropertyType.dao.findById(propertyTypeId);
    	createPropertyType(pt, parentTypeId, materialTypeId);

    	// 更新前为不关联原材料的父类别，更新为关联原材料，则删除该父类别的所有子类别
    	if (ptType == AppConstants.TYPE_PT_PRAENT_WITHOUT_M && materialTypeId != null) {
    		PrototypeService.service.deleteChildrenType(propertyTypeId);
    	}
    	
    	// 未选择原材料类别
    	if (materialTypeId == null) {
    		if (parentTypeId != null) {
				setAttr("errorMsg", "选择了父类别的子类别必须选择原材料类别！");
    		} else {
    			pt.update();
    			PrototypeService.service.deletePropertiesByType(propertyTypeId);
    		}
    		renderJson(new String[]{"errorMsg"});
    		return;
    	} else {
    		
			Map<String, String> params = ToolWeb.getParamMap(getRequest());
			updateConflictType(pt, params);
			pt.update();
			
    		// 更换了原材料类别，删除现有原属性类别的所有属性
    		if (curMaterialTypeId != materialTypeId.intValue()) {
	    		PrototypeService.service.deletePropertiesByType(propertyTypeId);
	    		// 添加新加属性类别所有属性
	    		savePropertiesWithRank(params, propertyTypeId);
	    	// 更新现有属性
    		} else {
				List<Record> addProperties = new ArrayList<Record>();
				List<String> deleteProperties = new ArrayList<String>();
				List<Record> deleteCustomizations = new ArrayList<Record>();
				for (String key : params.keySet()) {
					if (key.startsWith("property_id_")) {
						String propertyId = params.get(key);
						String materialId = key.replace("property_id_", "");
						String pMaterialId = params.get("material_id_" + key.replace("property_id_", ""));
						// 新加的属性
						if (StringUtils.isBlank(propertyId) && pMaterialId != null) {
							addProperties.add(new Record().set("property_type_id", propertyTypeId).set(
																"material_id", Integer.valueOf(pMaterialId)));
						// 删除的属性
						} else if (!StringUtils.isBlank(propertyId) && pMaterialId == null) {
							deleteProperties.add(propertyId);
							deleteCustomizations.add(new Record().set("prototype_id", prototypeId).set(
																	"material_type_id", getParaToInt("material_type_id")).set(
																	"material_id", materialId));
						}
					}
				}
				if (addProperties.size() != 0) {
					int[] result = PrototypeService.service.saveProperties(addProperties);
					for (int r : result) {
						if (r == AppConstants.NG) {
							setAttr("errorMsg", "部分属性更新失败！");
							break;
						}
					}
				}
				if (deleteProperties.size() != 0) {
					int count = PrototypeService.service.deleteProperties(deleteProperties);
					if (count != deleteProperties.size()) {
						setAttr("errorMsg", "部分属性更新失败！");
					}
				}
				if (deleteCustomizations.size() != 0) 
					PrototypeService.service.deleteCustomizationByProperties(deleteCustomizations);
    		}
    	}
		renderJson(new String[]{"errorMsg"});
    }

    @Before(Tx.class)
    public void deletePropertyType() {

    	int propertyTypeId = getParaToInt(0);
    	int prototypeId = getParaToInt(1);
    	int materialTypeId = getParaToInt(2);
    	if (PropertyType.dao.deleteById(propertyTypeId) &&
			PrototypeService.service.deletePropertiesByType(propertyTypeId) &&
    		PrototypeService.service.deleteChildrenType(propertyTypeId)) {
    	} else {
			setAttr("errorMsg", "删除失败");
    	}
    	PrototypeService.service.deleteCustomizationByType(prototypeId, materialTypeId);
		renderJson(new String[]{"errorMsg"});
    }

    @Before(Tx.class)
    public void updateTypeRank() {
    	
    	int prototypeId = getParaToInt(0);
    	String ranks = getPara(1);
    	String[] rankArray = ranks.split(",");

		List<Record> updateTypes = new ArrayList<Record>();
		for (int i = rankArray.length, j = 1; i > 0; i--,j++) {
			updateTypes.add(new Record().set("property_type_id", Integer.valueOf(rankArray[i-1])).set("rank", j));
		}
		int[] result = PrototypeService.service.updateTypeRank(updateTypes);
		int r = 0;
		while (r < result.length && result[r] == AppConstants.OK)
			r++;
		if (r < result.length) {
			setAttr("errorMsg", "部分属性类别更新失败！");
		}
		ranks = PrototypeService.service.getTypeRank(prototypeId);
		setAttr("ranks", ranks);
		renderJson(new String[]{"errorMsg", "ranks"});
    }

    @Before(Tx.class)
    public void updatePropertyRank() {
    	
    	int propertyTypeId = getParaToInt(0);
    	String ranks = getPara(1);
    	String[] rankArray = ranks.split(",");
    	
    	List<Record> updateProperties = new ArrayList<Record>();
    	for (int i = rankArray.length, j = 1; i > 0; i--, j++) {
    		updateProperties.add(new Record().set("property_id", Integer.valueOf(rankArray[i-1])).set("rank", j));
    	}
    	int[] result = PrototypeService.service.updatePropertyRank(updateProperties);
    	int r = 0;
    	while (r < result.length && result[r] == AppConstants.OK)
    		r++;
    	if (r < result.length) {
    		setAttr("errorMsg", "部分属性更新失败！");
    	}
    	ranks = PrototypeService.service.getPropertyRank(propertyTypeId);
    	setAttr("ranks", ranks);
    	renderJson(new String[]{"errorMsg", "ranks"});
    }
}
