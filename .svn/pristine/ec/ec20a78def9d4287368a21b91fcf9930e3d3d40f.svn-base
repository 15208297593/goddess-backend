<?xml version="1.0" encoding="UTF-8"?>

<sql-statement namespace="manage.prototype">

    <sql id="all">
        <![CDATA[
              FROM prototype
        ]]>
    </sql>
    
    <sql id="checkPrototypeIsUsed">
        <![CDATA[
            (
            SELECT u.cell_num,
                   u.nick_name,
                   null as commodity_id
              FROM user_customization uc, users u
             WHERE uc.user_id = u.user_id
               AND u.delete_flag = '0'
               AND uc.customize_status < ?
               AND uc.prototype_id = ? 
             LIMIT 1
            )
            UNION
            (
            SELECT null as cell_num,
                   null as nick_name,
                   commodity_id
              FROM commodities
             WHERE is_shelved = ?
               AND prototype_id = ? 
             LIMIT 1
            )
        ]]>
    </sql>
    <sql id="checkTypeIsUsed">
        <![CDATA[
            (
            SELECT u.cell_num,
                   u.nick_name,
                   null as commodity_id
              FROM user_customization uc, customization_properties cp, property_type pt, users u
             WHERE uc.user_id = u.user_id
               AND uc.user_customization_id = cp.user_customization_id
               AND cp.prototype_id = pt.prototype_id
               AND cp.material_type_id = pt.material_type_id
               AND u.delete_flag = '0'
               AND uc.customize_status < ?
               AND pt.property_type_id = ?
             LIMIT 1
            )
            UNION
            (
            SELECT null as cell_num,
                   null as nick_name,
                   c.commodity_id
              FROM commodities c,customization_properties cp, property_type pt
             WHERE c.commodity_id = cp.commodity_id
               AND cp.prototype_id = pt.prototype_id
               AND cp.material_type_id = pt.material_type_id
               AND c.is_shelved = ?
               AND pt.property_type_id = ?
             LIMIT 1
            )
        ]]>
    </sql>
    
    <sql id="checkPropertyIsUsed">
        <![CDATA[
            (
            SELECT u.cell_num,
                   u.nick_name,
                   null as commodity_id
              FROM user_customization uc, customization_properties cp, property_type pt,properties p, users u
             WHERE uc.user_id = u.user_id
               AND uc.user_customization_id = cp.user_customization_id
               AND cp.prototype_id = pt.prototype_id
               AND pt.property_type_id = p.property_type_id
               AND cp.material_id = p.material_id
               AND u.delete_flag = '0'
               AND uc.customize_status < ?
               AND find_in_set(p.property_id, ?) 
             LIMIT 1
            )
            UNION
            (
            SELECT null as cell_num,
                   null as nick_name,
                   c.commodity_id
              FROM commodities c,customization_properties cp,property_type pt,properties p
             WHERE c.commodity_id = cp.commodity_id
               AND cp.prototype_id = pt.prototype_id
               AND pt.property_type_id = p.property_type_id
               AND cp.material_id = p.material_id
               AND c.is_shelved = ?
               AND find_in_set(p.property_id, ?) 
             LIMIT 1
             )
        ]]>
    </sql>
    
    <sql id="getPropertyTypes">
        <![CDATA[
            SELECT mt.material_type_id,
                   mt.type_name,
                   mt.exhibition_type,
                   if (pt.property_type_id IS NULL, 0, 1) as type_selected,
                   pt.property_type_id,
                   pt.is_required,
                   pt.default_material_id
              FROM material_type mt
         LEFT JOIN property_type pt 
                ON mt.material_type_id = pt.material_type_id
               AND pt.prototype_id = ? 
             WHERE mt.delete_flag = '0'
          ORDER BY mt.material_type_id
        ]]>
    </sql>
    
    <sql id="getProperties">
        <![CDATA[
            SELECT m.material_id,
                   m.material_name,
                   m.material_exhibition,
                   m.price_addition,
                   0 as property_selected
              FROM materials m
             WHERE m.material_type_id = ?
               AND m.delete_flag = '0'
          ORDER BY m.material_id
        ]]>
    </sql>
    
    <sql id="getPropertiesWithTypeId">
        <![CDATA[
            SELECT m.material_id,
                   m.material_name,
                   m.material_exhibition,
                   m.price_addition,
                   p.property_id,
                   if(p.material_id IS NULL, 0, 1) as property_selected
              FROM materials m
         LEFT JOIN properties p
                ON m.material_id = p.material_id
               AND p.property_type_id = ?
             WHERE m.material_type_id = ?
               AND m.delete_flag = '0'
          ORDER BY m.material_id
        ]]>
    </sql>
    
    <sql id="getPropertyTypesWithoutSelf">
        <![CDATA[
            SELECT mt.material_type_id,
                   ifnull(pt.type_name, mt.type_name) as type_name
              FROM property_type pt, material_type mt
             WHERE pt.material_type_id = mt.material_type_id
               AND mt.material_type_id <> ?
               AND pt.prototype_id = ?
               AND mt.delete_flag = '0'
          ORDER BY mt.material_type_id
        ]]>
    </sql>

    <sql id="getPropertyTypesByPtid">
        <![CDATA[
            select 
                pt.property_type_id,
                pt.material_type_id,
                pt.parent_type_id,
                pt.prototype_id,
                pt.is_required,
                pt.default_material_id,
                pt.conflict_type,
                pt.conflict_alert,
                pt.rank,
                ifnull(pt.type_name, mt.type_name) as type_name,
                ifnull(pt.type_name_ext, mt.type_name_ext) as type_name_ext,
                mt.exhibition_type
            from property_type pt
       left join material_type mt
              on pt.material_type_id = mt.material_type_id
           where property_type_id = ?
        ]]>
    </sql>

    <sql id="getPropertyTypesByPid">
        <![CDATA[
            select 
			    pt.property_type_id,
			    pt.material_type_id,
			    pt.parent_type_id,
			    pt.prototype_id,
                pt.conflict_type,
			    ifnull(pt.type_name, mt.type_name) as type_name,
			    ifnull(pt.type_name_ext, mt.type_name_ext) as type_name_ext,
			    mt.type_name as material_type_name,
			    pt.rank
			from
			    property_type pt
	   left join
			    material_type mt
		      on pt.material_type_id = mt.material_type_id
		   where pt.prototype_id = ?
		order by pt.rank DESC, pt.property_type_id ASC
        ]]>
    </sql>

    <sql id="getParentTypesByPid">
        <![CDATA[
          select pt.property_type_id,
                 pt.type_name
            from property_type pt
           where pt.prototype_id = ?
             and pt.property_type_id <> ?
             and pt.parent_type_id is null
             and pt.material_type_id is null
        ]]>
    </sql>

    <sql id="saveProperty">
        <![CDATA[
            INSERT INTO properties(property_type_id, material_id) VALUES(?, ?)
        ]]>
    </sql>

    <sql id="savePropertiesWithRank">
        <![CDATA[
            INSERT INTO properties(property_type_id, material_id, rank) VALUES(?, ?, ?)
        ]]>
    </sql>

    <sql id="deleteProperty">
        <![CDATA[
            DELETE FROM properties WHERE property_id IN ${properties}
        ]]>
    </sql>

    <sql id="deletePropertiesByType">
        <![CDATA[
            DELETE FROM properties WHERE property_type_id = ?
        ]]>
    </sql>

    <sql id="deleteCustomizationByType">
        <![CDATA[
            DELETE 
              FROM customization 
             WHERE prototype_id = ?
               AND property_key like concat('%_', ?, '@%')
        ]]>
    </sql>

    <sql id="deleteCustomizationByProperties">
        <![CDATA[
            DELETE 
              FROM customization 
             WHERE prototype_id = ?
               AND property_key like concat('%_', ?, '@', ? ,'_%')
        ]]>
    </sql>

    <sql id="getTypeRank">
        <![CDATA[
            SELECT CAST(group_concat(material_type_id ORDER BY rank desc) AS CHAR) as rank
              FROM property_type
             WHERE prototype_id = ? 
               AND rank <> 0
          GROUP BY prototype_id
          
        ]]>
    </sql>
    
    <sql id="getPropertyRank">
        <![CDATA[
            SELECT CAST(group_concat(material_id ORDER BY rank desc) AS CHAR) as rank
              FROM properties 
             WHERE property_type_id = ? 
               AND rank <> 0
          GROUP BY property_type_id
        ]]>
    </sql>

    <sql id="updateTypeRank">
        <![CDATA[
            UPDATE property_type
               SET rank = ?
             WHERE property_type_id = ?
        ]]>
    </sql>

    <sql id="updatePropertyRank">
        <![CDATA[
            UPDATE properties
               SET rank = ?
             WHERE property_id = ?
        ]]>
    </sql>
    
    <sql id="getPrototypeAccessory">
        <![CDATA[
            SELECT *
              FROM prototype_accessory 
             WHERE prototype_id = ? 
        ]]>
    </sql>

    <sql id="deletePrototypeAccByType">
        <![CDATA[
           delete 
             from prototype_accessory 
		    where prototype_id = ? 
		      and accessory_type = ?
        ]]>
    </sql>

    <sql id="getMaterialTypes">
        <![CDATA[
            SELECT *
              FROM material_type
             WHERE delete_flag = '0'
        ]]>
    </sql>
    
    <sql id="getPrototypeClassification">
        <![CDATA[
            SELECT c.*
              FROM prototype_classification cc,
                   classification c
             WHERE cc.classification_id = c.classification_id
               AND cc.prototype_id = ?
        ]]>
    </sql>

    <sql id="deleteClassificationByPrototype">
        <![CDATA[
            DELETE 
              FROM prototype_classification
             WHERE prototype_id = ?
        ]]>
    </sql>

    <sql id="addPrototypeClassification">
        <![CDATA[
            INSERT INTO prototype_classification (prototype_id, classification_id, brand_id, category)
                 VALUES (?, ?, ?, ?)
        ]]>
    </sql>

    <sql id="updateClassificationBrand">
        <![CDATA[
            UPDATE prototype_classification 
               SET brand_id = ?
             WHERE prototype_id = ?
        ]]>
    </sql>
</sql-statement>